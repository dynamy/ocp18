---
apiVersion: "v1"
kind: "Template"
metadata:
  name: "easytravel-with-loadgen"
  annotations:
    description: "The Dynatrace easyTravel sample application (with UEM loadgen)."
objects:
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "mongodb"
    name: "mongodb"
  spec:
    replicas: "1"
    selector:
      app: "mongodb"
      deploymentconfig: "mongodb"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "mongodb"
          deploymentconfig: "mongodb"
      spec:
        containers:
        - name: "mongodb"
          image: "dynatrace/easytravel-mongodb"
          ports:
          - containerPort: 27017
            protocol: "TCP"
          - containerPort: 28017
            protocol: "TCP"
          readinessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 27017
            initialDelaySeconds: 60
            timeoutSeconds: 1
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "backend"
    name: "backend"
  spec:
    replicas: "1"
    selector:
      app: "backend"
      deploymentconfig: "backend"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "backend"
          deploymentconfig: "backend"
      spec:
        containers:
        - name: "backend"
          image: "dynatrace/easytravel-backend"
          env:
          - name: "ET_DATABASE_LOCATION"
            value: "mongodb:27017"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          readinessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 5
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "frontend"
    name: "frontend"
  spec:
    replicas: "1"
    selector:
      app: "frontend"
      deploymentconfig: "frontend"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "frontend"
          deploymentconfig: "frontend"
      spec:
        containers:
        - name: "frontend"
          image: "dynatrace/easytravel-frontend"
          env:
          - name: "ET_BACKEND_URL"
            value: "http://backend:8080"
          ports:
          - containerPort: 8080
            protocol: "TCP"
          readinessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: "/"
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 5
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "www"
    name: "www"
  spec:
    replicas: "1"
    selector:
      app: "www"
      deploymentconfig: "www"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "www"
          deploymentconfig: "www"
      spec:
        containers:
        - name: "www"
          image: "dynatrace/easytravel-nginx"
          env:
          - name: "ET_FRONTEND_LOCATION"
            value: "frontend:8080"
          - name: "ET_BACKEND_LOCATION"
            value: "backend:8080"
          ports:
          - containerPort: 80
            protocol: "TCP"
          - containerPort: 8080
            protocol: "TCP"
          readinessProbe:
            httpGet:
              path: "/"
              port: 80
            initialDelaySeconds: 15
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: "/"
              port: 80
            initialDelaySeconds: 60
            timeoutSeconds: 5
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "DeploymentConfig"
  metadata:
    labels:
      app: "loadgen"
    name: "loadgen"
  spec:
    replicas: "1"
    selector:
      app: "loadgen"
      deploymentconfig: "loadgen"
    strategy:
      resources: {}
    template:
      metadata:
        labels:
          app: "loadgen"
          deploymentconfig: "loadgen"
      spec:
        containers:
        - image: "emperorwilson/easytravel-loadgen-dt"
          name: "loadgen"
          env:
          - name: "ET_FRONTEND_URL"
            value: "http://www:80"
          - name: "ET_BACKEND_URL"
            value: "http://www:8080"
          - name: "ET_PROBLEMS_DELAY"
            value: '7500'
          - name: "ET_PROBLEMS"
            value: 'CPULoad,DatabaseSlowdown,JourneySearchError500,LoginProblems,TravellersOptionBox'
          resources: {}
  status: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "mongodb"
    name: "mongodb"
  spec:
    ports:
    - name: "27017-tcp"
      port: 27017
      protocol: "TCP"
      targetPort: 27017
    - name: "28017-tcp"
      port: 28017
      protocol: "TCP"
      targetPort: 28017
    selector:
      app: "mongodb"
      deploymentconfig: "mongodb"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "backend"
    name: "backend"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "backend"
      deploymentconfig: "backend"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "frontend"
    name: "frontend"
  spec:
    ports:
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "frontend"
      deploymentconfig: "frontend"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Service"
  metadata:
    labels:
      app: "www"
    name: "www"
  spec:
    ports:
    - name: "80-tcp"
      port: 80
      protocol: "TCP"
      targetPort: 80
    - name: "8080-tcp"
      port: 8080
      protocol: "TCP"
      targetPort: 8080
    selector:
      app: "www"
      deploymentconfig: "www"
  status:
    loadBalancer: {}
- apiVersion: "v1"
  kind: "Route"
  metadata:
    name: "www"
  spec:
    port:
      targetPort: 80
    to:
      kind: "Service"
      name: "www"
